{"version":3,"sources":["serviceWorker.ts","CardGamesLibrary/typescript/Card.ts","CardGamesLibrary/typescript/CardSuit.ts","CardGamesLibrary/typescript/Deck.ts","CardGamesLibrary/typescript/Position.ts","CardGamesLibrary/react-components/CardComponent.tsx","Games/War.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","CardSuit","Card","suit","value","Object","classCallCheck","this","displayedValue","concat","Deck","_this","_Cards","size","oneToThirteen","Array","fill","map","v","i","CLUBS","HEARTS","SPADES","DIAMONDS","forEach","Cards","length","createClass","key","set","cards","get","amount","_this2","Date","getTime","position","Math","floor","random","bottom","splice","top","card","pop","Position","x","y","CardComponent","_React$Component","props","possibleConstructorReturn","getPrototypeOf","call","inherits","_cardSize","width","height","cardSize","fontSize","sqrt","react_default","a","createElement","cardColor","includes","show","onClick","clicked","style","left","padding","textAlign","borderStyle","borderColor","backgroundColor","color","text","split","React","Component","WarState","player1","player2","revealedCards","winner","undefined","p1score","p2score","tieCounter","turnCounter","games","Game","title","url","reactcomponent","War","state","keyDown","e","setState","code","p1Card","p2Card","push","deck","shuffle","filter","console","log","document","addEventListener","innerWidth","innerHeight","cardWidth","halfCardWidth","cardHeight","tableHeight","p1x","p2x","p1y","p2y","revealedX","revealedY","getCardPosition","xResult","xOffset","yResult","CardComponent_CardComponent","Index","game","react_router_dom","to","App","basename","react_router","path","exact","component","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5badaf7c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nexport const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CardSuit } from \"./CardSuit\";\r\n\r\nexport class Card {\r\n\r\n    suit: CardSuit;\r\n    value: number;\r\n    displayedValue: string;\r\n\r\n    constructor(suit: CardSuit, value: number) {\r\n        this.suit = suit;\r\n        this.value = value;\r\n        switch (value) {\r\n            case 1:\r\n                this.displayedValue = 'Ace';\r\n                break;\r\n            case 11:\r\n                this.displayedValue = 'Jack';\r\n                break;\r\n            case 12:\r\n                this.displayedValue = 'Queen';\r\n                break;\r\n            case 13:\r\n                this.displayedValue = 'King';\r\n                break;\r\n            default:\r\n                this.displayedValue = `${value}`;\r\n        }\r\n    }\r\n}\r\n","export enum CardSuit {\r\n    HEARTS = 'HEARTS',\r\n    CLUBS = 'CLUBS',\r\n    DIAMONDS = 'DIAMONDS',\r\n    SPADES = 'SPADES'\r\n}\r\n","import { Card } from \"./Card\";\r\nimport { CardSuit } from \"./CardSuit\";\r\n\r\nexport class Deck {\r\n\r\n    _Cards: Card[] = [];\r\n    set Cards(cards: Card[]) {\r\n        this._Cards = cards;\r\n        this.size = cards.length;\r\n    }\r\n    get Cards(): Card[] {\r\n        return this._Cards;\r\n    }\r\n    size: number;\r\n\r\n    constructor() {\r\n        const oneToThirteen = Array(13).fill(null).map((v, i) => i + 1);\r\n        [CardSuit.CLUBS, CardSuit.HEARTS, CardSuit.SPADES, CardSuit.DIAMONDS].forEach(suit => {\r\n            this.Cards = this.Cards.concat(oneToThirteen.map(v => new Card(suit, v)));\r\n        });\r\n        this.size = this.Cards.length;\r\n    }\r\n\r\n    public shuffle(amount?: number) {\r\n        const now = new Date().getTime();\r\n        Array(amount ? amount : this.size * this.size * 2).fill('').forEach(() => {\r\n            const position = Math.floor(Math.random() * this.size);\r\n            const bottom = this.Cards.splice(position);\r\n            const top = this.Cards;\r\n            const card = this.Cards.pop();\r\n            if (card) {\r\n                this.Cards = [card].concat(top).concat(bottom);\r\n            } else {\r\n                this.Cards = top.concat(bottom);\r\n            }\r\n        });\r\n    }\r\n}\r\n","export class Position {\r\n    x: number;\r\n    y: number;\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Card } from '../typescript/Card';\r\nimport { CardSuit } from '../typescript/CardSuit';\r\nimport { Position } from '../typescript/Position';\r\n\r\nexport class CardComponentProps {\r\n    text: string;\r\n    Card: Card;\r\n    show: boolean;\r\n    position: Position;\r\n    clicked: any;\r\n    constructor(suit: CardSuit, value: number) {\r\n        this.text = '';\r\n        this.Card = new Card(suit, value);\r\n        this.show = false;\r\n        this.position = new Position(0, 0);\r\n    }\r\n}\r\n\r\nexport class CardComponent extends React.Component {\r\n\r\n    static _cardSize: number = 100;\r\n    static width: number = 100;\r\n    static height: number = 150;\r\n    static get cardSize(): number {\r\n        return this._cardSize;\r\n    }\r\n    static set cardSize(value: number) {\r\n        this.width = value;\r\n        this.height = value * 1.5;\r\n        this._cardSize = value;\r\n    }\r\n\r\n    props: CardComponentProps;\r\n\r\n    constructor(props: CardComponentProps) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    render() {\r\n        const size = CardComponent.cardSize;\r\n        const width = CardComponent.width;\r\n        const height = CardComponent.height;\r\n        const fontSize = Math.sqrt(CardComponent.width) * 2;\r\n        const value = this.props.Card.displayedValue;\r\n        const suit = this.props.Card.suit === CardSuit.HEARTS ? <span>&#x2665;</span>\r\n            : (this.props.Card.suit === CardSuit.CLUBS ? <span>&#x2663;</span>\r\n            : (this.props.Card.suit === CardSuit.DIAMONDS ? <span>&#x2666;</span>\r\n            : this.props.Card.suit === CardSuit.SPADES ? <span>&#x2660;</span> : ''));\r\n        const cardColor = [CardSuit.HEARTS, CardSuit.DIAMONDS].includes(this.props.Card.suit) ? 'red' : 'black';\r\n        return (\r\n            <div>\r\n                {\r\n                    this.props.show ?\r\n                    <div onClick={() => this.props.clicked()} style={{\r\n                        position:'absolute', top:`${this.props.position.y}px`, left:`${this.props.position.x}px`,\r\n                        width:`${width}px`, height:`${height}px`, padding:`${size / 10}px`,\r\n                        fontSize:`${fontSize}px`, textAlign:'center',\r\n                        borderStyle:'solid', borderColor:'black', backgroundColor:'white', color:cardColor}}>\r\n                        {value}\r\n                        <br />\r\n                        <span style={{fontSize:`${width}px`}}>{suit}</span>\r\n                    </div>\r\n                    :\r\n                    <div onClick={() => this.props.clicked()} style={{\r\n                        position:'absolute', top:`${this.props.position.y}px`, left:`${this.props.position.x}px`,\r\n                        width:`${width}px`, height:`${height}px`, padding:`${size / 10}px`,\r\n                        fontSize:`${fontSize * 1.5}px`, textAlign:'center', color:'white',\r\n                        borderStyle:'solid', borderColor:'black', backgroundColor:'blue'}}>\r\n                            {this.props.text.split(' ').map(v =>\r\n                                <div>\r\n                                    <span>{v}</span>\r\n                                    <br />\r\n                                </div>\r\n                            )}\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Deck } from '../CardGamesLibrary/typescript/Deck';\r\nimport { CardComponent } from '../CardGamesLibrary/react-components/CardComponent';\r\nimport { Position } from '../CardGamesLibrary/typescript/Position';\r\n\r\nexport class WarState {\r\n    player1: Deck = new Deck();\r\n    player2: Deck = new Deck();\r\n    revealedCards: Deck = new Deck();\r\n    winner: any = undefined;\r\n    p1score: number = 26;\r\n    p2score: number = 26;\r\n    tieCounter: number = 0;\r\n    turnCounter: number = 0;\r\n}\r\n\r\nexport class War extends React.Component {\r\n\r\n    state: WarState;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = new WarState();\r\n        const deck = new Deck();\r\n        deck.shuffle();\r\n        // this.state.player1.Cards = deck.Cards.splice(26);\r\n        // this.state.player2.Cards = deck.Cards;\r\n        this.state.player1.Cards = deck.Cards.filter((v, i) => i % 2 === 0);\r\n        this.state.player2.Cards = deck.Cards.filter((v, i) => i % 2 === 1);\r\n        console.log(this.state.player1.Cards);\r\n        console.log(this.state.player2.Cards);\r\n        this.state.revealedCards.Cards = [];\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.keyDown);\r\n    }\r\n\r\n    keyDown = (e: any) => {\r\n        this.setState((state: WarState) => {\r\n            if (((e === 'KeyS' || e.code === 'KeyS') && state.winner !== undefined) || e.code === 'Space' || e === ' ') {\r\n                if (state.p1score === 0 || state.p2score === 0) {\r\n                    // game over\r\n                } else {\r\n                    if (state.tieCounter === 0) {\r\n                        state.revealedCards.Cards = [];\r\n                    } else {\r\n                        state.tieCounter--;\r\n                    }\r\n                    const p1Card = state.player1.Cards.pop();\r\n                    const p2Card = state.player2.Cards.pop();\r\n                    if (p1Card && p2Card) {\r\n                        state.revealedCards.Cards.push(p1Card);\r\n                        state.revealedCards.Cards.push(p2Card);\r\n                        if (state.tieCounter === 0) {\r\n                            state.turnCounter++;\r\n                            state.winner = p1Card.value === p2Card.value ? undefined : (p1Card.value > p2Card.value);\r\n                            if (state.winner === true) {\r\n                                state.player1.Cards = state.revealedCards.Cards.concat(state.player1.Cards);\r\n                            } else if (state.winner === false) {\r\n                                state.player2.Cards = state.revealedCards.Cards.concat(state.player2.Cards);\r\n                            } else if (state.winner === undefined) {\r\n                                state.tieCounter = 4;\r\n                            }\r\n                        }\r\n                    }\r\n                    state.p1score = state.player1.Cards.length;\r\n                    state.p2score = state.player2.Cards.length;\r\n                }\r\n            }\r\n            return state;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // calculate x, y, width and heights for UI elements\r\n        const length = (window.innerWidth < window.innerHeight ? window.innerWidth : window.innerHeight) - 20;\r\n        CardComponent.cardSize = length / 8;\r\n        const cardWidth = CardComponent.width;\r\n        const halfCardWidth = CardComponent.width * 0.4;\r\n        const cardHeight = CardComponent.height;\r\n        const tableHeight = cardHeight * 2;\r\n        const p1x = halfCardWidth;\r\n        const p2x = length - cardWidth - halfCardWidth;\r\n        const p1y = length - cardHeight - halfCardWidth;\r\n        const p2y = length - cardHeight - halfCardWidth;\r\n        const revealedX = length / 2;\r\n        const revealedY = halfCardWidth;\r\n        // scores displayed on the card stacks\r\n        const p1score = `P1 ${this.state.p1score}`;\r\n        const p2score = `Comp ${this.state.p2score}`;\r\n        // function used to get position for the card\r\n        const getCardPosition = (i: number) => {\r\n            let xResult = revealedX;\r\n            const xOffset = halfCardWidth + ((Math.floor(i / 2) % 5) * halfCardWidth) + (Math.floor(i / 10) * 15);\r\n            xResult += (i % 2 === 0) ? -1 * (xOffset + cardWidth) : xOffset;\r\n            let yResult = revealedY;\r\n            yResult += (Math.floor(i / 10) * 105) + ((Math.floor(i / 2) % 5) * halfCardWidth)\r\n            return new Position(xResult, yResult);\r\n        }\r\n        return (\r\n            <div style={{width:`${length}px`, height:`${length}px`, backgroundColor:'green'}}>\r\n                {/* Revealed cards */}\r\n                <div>\r\n                    {\r\n                        this.state.revealedCards.Cards.map((card, i) =>\r\n                            <CardComponent Card={card} show={true} position={getCardPosition(i)}\r\n                                clicked={() => undefined} key={`card_${i}`} text=\"\"/>)\r\n                    }\r\n                </div>\r\n                {/* Arrow */}\r\n                <div style={{position:'absolute', top:`${revealedY + 150 + halfCardWidth}px`, left:`${revealedX - 50}px`, fontSize:'100px'}}>\r\n                    {\r\n                        this.state.winner === undefined ? <span>&harr;</span>\r\n                        : (this.state.winner === true ? <span>&larr;</span>\r\n                            : (this.state.winner === false ? <span>&rarr;</span> : ''))\r\n                    }\r\n                </div>\r\n                {/* Table */}\r\n                <div style={{position:'absolute', top:`${length - tableHeight}px`,\r\n                    width:`${length}px`, height:`${tableHeight}px`, backgroundColor:'brown'}}>\r\n                </div>\r\n                {/* Player 1's cards */}\r\n                <div>\r\n                    {\r\n                        this.state.player1.Cards.map((card, i) =>\r\n                            <CardComponent Card={card} show={false} position={new Position(p1x, p1y)}\r\n                                clicked={() => undefined} key={`card_${i}`} text={p1score}/>)\r\n                    }\r\n                </div>\r\n                {/* Player 2's cards */}\r\n                <div>\r\n                    {\r\n                        this.state.player2.Cards.map((card, i) =>\r\n                            <CardComponent Card={card} show={false} position={new Position(p2x, p2y)}\r\n                                clicked={() => undefined} key={`card_${i}`} text={p2score}/>)\r\n                    }\r\n                </div>\r\n                {/* Score */}\r\n                <div style={{position:'absolute', top:`${length - tableHeight + 10}px`, left:`${length / 3}px`,\r\n                    width:`${length / 3}px`, height:`${tableHeight}px`, color:'white', textAlign:'center'}}>\r\n                    {\r\n                        <div>\r\n                            <div>\r\n                                Press Space Bar to play a turn\r\n                            </div>\r\n                            <div>\r\n                                Total number of turns: {this.state.turnCounter}\r\n                            </div>\r\n                            {\r\n                                this.state.p1score === 0 || this.state.p2score === 0 ?\r\n                                    <div>\r\n                                        Game Over <br />\r\n                                        {this.state.p2score === 0\r\n                                            ? 'Player 1 wins' : 'The Computer Won'}\r\n                                        <br /> Press F5 to restart\r\n                                    </div>\r\n                                    : <div></div>\r\n                            }\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {\n    BrowserRouter as Router,\n    Route, Link\n} from 'react-router-dom';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { War } from './Games/War';\n\nclass Game {\n    title: string = '';\n    url: string = '';\n    reactcomponent: any = undefined;\n    constructor(title: string, url: string, reactcomponent: any) {\n        this.title = title;\n        this.url = url;\n        this.reactcomponent = reactcomponent;\n    }\n}\n\nconst games = [\n    new Game('War', '/War', War)\n]\n\nclass Index extends React.Component {\n    render() {\n        return (\n            <div>\n                <br />\n                {\n                    games.map(game =>\n                        <div key=\"game.title\">\n                            <Link to={game.url}>{game.title}</Link>\n                            <br />\n                        </div>\n                    )\n                }\n            </div>\n        );\n    }\n}\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Router basename={!window.location.hostname.includes('localhost') ? '/card-games/' : '/'}>\n                <Route path=\"/\" exact component={Index} />\n                {\n                    games.map(game =>\n                        <Route key={game.url} path={game.url} exact component={game.reactcomponent} />\n                    )\n                }\n            </Router>\n        );\n    }\n}\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}